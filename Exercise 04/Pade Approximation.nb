(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     68136,       1416]
NotebookOptionsPosition[     20989,        555]
NotebookOutlinePosition[     67280,       1407]
CellTagsIndexPosition[     67237,       1404]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"This", " ", "is", " ", "a", " ", "comment", " ", "I", " ", 
    RowBox[{"guess", "!"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"F", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"Series", "[", 
       RowBox[{
        RowBox[{"Exp", "[", "x", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "7"}], "}"}]}], "]"}], "//", 
      "Normal"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"A", "[", "x_", "]"}], "=", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"a", "[", "n", "]"}], " ", 
        RowBox[{"x", "^", "n"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "0", ",", "3"}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"B", "[", "x_", "]"}], "=", 
     RowBox[{"1", "+", 
      RowBox[{"Sum", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"b", "[", "m", "]"}], " ", 
         RowBox[{"x", "^", "m"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", "1", ",", "4"}], "}"}]}], "]"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Residual", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"F", "[", "x", "]"}], "-", 
      RowBox[{
       RowBox[{"A", "[", "x", "]"}], "/", 
       RowBox[{"B", "[", "x", "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"a0", "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Residual", "[", "0", "]"}], "==", "0"}], ",", 
       RowBox[{"a", "[", "0", "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Residual", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"Residual", "[", "x", "]"}], "/.", " ", "a0"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff1", "[", "x_", "]"}], "=", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"Residual", "[", "x", "]"}], ",", "x"}], "]"}]}], ";"}], "\n", 
   RowBox[{"a1", "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"diff1", "[", "0", "]"}], "==", "0"}], ",", 
       RowBox[{"a", "[", "1", "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff1", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"diff1", "[", "x", "]"}], "/.", " ", "a1"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff2", "[", "x_", "]"}], "=", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"diff1", "[", "x", "]"}], ",", "x"}], "]"}]}], ";"}], "\n", 
   RowBox[{"a2", "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"diff2", "[", "0", "]"}], "==", "0"}], ",", 
       RowBox[{"a", "[", "2", "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff2", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"diff2", "[", "x", "]"}], "/.", " ", "a2"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"diff3", "[", "x_", "]"}], "=", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"diff2", "[", "x", "]"}], ",", "x"}], "]"}]}], ";"}], "\n", 
   RowBox[{"a3", "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"diff3", "[", "0", "]"}], "==", "0"}], ",", 
       RowBox[{"a", "[", "3", "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff3", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"diff3", "[", "x", "]"}], "/.", " ", "a3"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"diff4", "[", "x_", "]"}], "=", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"diff3", "[", "x", "]"}], ",", "x"}], "]"}]}], ";"}], "\n", 
   RowBox[{"b1", "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"diff4", "[", "0", "]"}], "==", "0"}], ",", 
       RowBox[{"b", "[", "1", "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff4", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"diff4", "[", "x", "]"}], "/.", " ", "b1"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"diff5", "[", "x_", "]"}], "=", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"diff4", "[", "x", "]"}], ",", "x"}], "]"}]}], ";"}], "\n", 
   RowBox[{"b2", "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"diff5", "[", "0", "]"}], "==", "0"}], ",", 
       RowBox[{"b", "[", "2", "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff5", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"diff5", "[", "x", "]"}], "/.", " ", "b2"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"diff6", "[", "x_", "]"}], "=", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"diff5", "[", "x", "]"}], ",", "x"}], "]"}]}], ";"}], "\n", 
   RowBox[{"b3", "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"diff6", "[", "0", "]"}], "==", "0"}], ",", 
       RowBox[{"b", "[", "3", "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff6", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"diff6", "[", "x", "]"}], "/.", " ", "b3"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"diff7", "[", "x_", "]"}], "=", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"diff6", "[", "x", "]"}], ",", "x"}], "]"}]}], ";"}], "\n", 
   RowBox[{"b4", "=", 
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"diff7", "[", "0", "]"}], "==", "0"}], ",", 
       RowBox[{"b", "[", "4", "]"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"diff7", "[", "x_", "]"}], "=", 
     RowBox[{
      RowBox[{"diff7", "[", "x", "]"}], "/.", " ", "b4"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.9409274497975407`*^9, 3.940927482998044*^9}, {
  3.9409275392856503`*^9, 3.9409275751503754`*^9}, {3.940927852813183*^9, 
  3.940927856128905*^9}, {3.9409279223370075`*^9, 3.940928036530025*^9}, {
  3.9409280749878144`*^9, 3.940928100914449*^9}, {3.9409281961616106`*^9, 
  3.9409283223647223`*^9}, {3.940928406088536*^9, 3.9409284086772995`*^9}, {
  3.940928668969782*^9, 3.9409287222955027`*^9}, {3.940928844714037*^9, 
  3.9409288944224577`*^9}, {3.940928926558916*^9, 3.9409289849610105`*^9}, {
  3.940929281051765*^9, 3.940929283649446*^9}, {3.9409294838180885`*^9, 
  3.94092954282024*^9}, {3.9409302573622847`*^9, 3.940930347833933*^9}, {
  3.940930424978075*^9, 3.9409305569029264`*^9}, {3.940930714042656*^9, 
  3.940930756457614*^9}, {3.9409307988524804`*^9, 
  3.940930815161895*^9}},ExpressionUUID->"73f0e8a9-0f47-4d61-becd-\
bc489685529a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "[", "0", "]"}], "\[Rule]", "1"}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.9409307491998*^9},
 CellLabel->
  "Out[231]=",ExpressionUUID->"98107158-2568-4e3f-8fa7-27c08d691a98"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "[", "1", "]"}], "\[Rule]", 
   RowBox[{"1", "+", 
    RowBox[{"b", "[", "1", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.9409307492190475`*^9},
 CellLabel->
  "Out[234]=",ExpressionUUID->"4034e168-c51e-4d58-a63a-8cc9a80aa96b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "[", "2", "]"}], "\[Rule]", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", 
       RowBox[{"b", "[", "1", "]"}]}], "+", 
      RowBox[{"2", " ", 
       RowBox[{"b", "[", "2", "]"}]}]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.9409307492223573`*^9},
 CellLabel->
  "Out[237]=",ExpressionUUID->"5ba3dff9-0101-4350-a1f5-640eda196b3b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "[", "3", "]"}], "\[Rule]", 
   RowBox[{
    FractionBox["1", "6"], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"3", " ", 
       RowBox[{"b", "[", "1", "]"}]}], "+", 
      RowBox[{"6", " ", 
       RowBox[{"b", "[", "2", "]"}]}], "+", 
      RowBox[{"6", " ", 
       RowBox[{"b", "[", "3", "]"}]}]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.9409307492263927`*^9},
 CellLabel->
  "Out[240]=",ExpressionUUID->"97ce0e43-8f56-4478-81c4-32594ef7fa0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"b", "[", "1", "]"}], "\[Rule]", 
   RowBox[{
    FractionBox["1", "4"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      RowBox[{"12", " ", 
       RowBox[{"b", "[", "2", "]"}]}], "-", 
      RowBox[{"24", " ", 
       RowBox[{"b", "[", "3", "]"}]}], "-", 
      RowBox[{"24", " ", 
       RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.9409307492309923`*^9},
 CellLabel->
  "Out[243]=",ExpressionUUID->"fea4411b-585a-4e50-9b36-0db360f0b995"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"b", "[", "2", "]"}], "\[Rule]", 
   RowBox[{
    FractionBox["1", "20"], " ", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"120", " ", 
       RowBox[{"b", "[", "3", "]"}]}], "-", 
      RowBox[{"360", " ", 
       RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.940930749234*^9},
 CellLabel->
  "Out[246]=",ExpressionUUID->"37cdcd77-904e-44f0-aaad-8b3a9dcdd34c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"b", "[", "3", "]"}], "\[Rule]", 
   RowBox[{
    FractionBox["1", "120"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      RowBox[{"1080", " ", 
       RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.940930749237245*^9},
 CellLabel->
  "Out[249]=",ExpressionUUID->"f390fc33-6d67-4f6e-9191-b38fb65d045c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"b", "[", "4", "]"}], "\[Rule]", 
   FractionBox["1", "840"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.9409307492402697`*^9},
 CellLabel->
  "Out[252]=",ExpressionUUID->"5a066c33-b997-497b-b595-13de40bd6162"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"a", "[", "1", "]"}], ",", 
     RowBox[{"a", "[", "2", "]"}], ",", 
     RowBox[{"a", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "1", "]"}], ",", 
     RowBox[{"b", "[", "2", "]"}], ",", 
     RowBox[{"b", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "0", "]"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"b", "[", "1", "]"}]}], ",", 
     RowBox[{"a", "[", "2", "]"}], ",", 
     RowBox[{"a", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "1", "]"}], ",", 
     RowBox[{"b", "[", "2", "]"}], ",", 
     RowBox[{"b", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "0", "]"}], ",", 
     RowBox[{"a", "[", "1", "]"}], ",", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", 
         RowBox[{"b", "[", "1", "]"}]}], "+", 
        RowBox[{"2", " ", 
         RowBox[{"b", "[", "2", "]"}]}]}], ")"}]}], ",", 
     RowBox[{"a", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "1", "]"}], ",", 
     RowBox[{"b", "[", "2", "]"}], ",", 
     RowBox[{"b", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "0", "]"}], ",", 
     RowBox[{"a", "[", "1", "]"}], ",", 
     RowBox[{"a", "[", "2", "]"}], ",", 
     RowBox[{
      FractionBox["1", "6"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", " ", 
         RowBox[{"b", "[", "1", "]"}]}], "+", 
        RowBox[{"6", " ", 
         RowBox[{"b", "[", "2", "]"}]}], "+", 
        RowBox[{"6", " ", 
         RowBox[{"b", "[", "3", "]"}]}]}], ")"}]}], ",", 
     RowBox[{"b", "[", "1", "]"}], ",", 
     RowBox[{"b", "[", "2", "]"}], ",", 
     RowBox[{"b", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "0", "]"}], ",", 
     RowBox[{"a", "[", "1", "]"}], ",", 
     RowBox[{"a", "[", "2", "]"}], ",", 
     RowBox[{"a", "[", "3", "]"}], ",", 
     RowBox[{
      FractionBox["1", "4"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        RowBox[{"12", " ", 
         RowBox[{"b", "[", "2", "]"}]}], "-", 
        RowBox[{"24", " ", 
         RowBox[{"b", "[", "3", "]"}]}], "-", 
        RowBox[{"24", " ", 
         RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], ",", 
     RowBox[{"b", "[", "2", "]"}], ",", 
     RowBox[{"b", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "0", "]"}], ",", 
     RowBox[{"a", "[", "1", "]"}], ",", 
     RowBox[{"a", "[", "2", "]"}], ",", 
     RowBox[{"a", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "1", "]"}], ",", 
     RowBox[{
      FractionBox["1", "20"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"120", " ", 
         RowBox[{"b", "[", "3", "]"}]}], "-", 
        RowBox[{"360", " ", 
         RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], ",", 
     RowBox[{"b", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "0", "]"}], ",", 
     RowBox[{"a", "[", "1", "]"}], ",", 
     RowBox[{"a", "[", "2", "]"}], ",", 
     RowBox[{"a", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "1", "]"}], ",", 
     RowBox[{"b", "[", "2", "]"}], ",", 
     RowBox[{
      FractionBox["1", "120"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        RowBox[{"1080", " ", 
         RowBox[{"b", "[", "4", "]"}]}]}], ")"}]}], ",", 
     RowBox[{"b", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "0", "]"}], ",", 
     RowBox[{"a", "[", "1", "]"}], ",", 
     RowBox[{"a", "[", "2", "]"}], ",", 
     RowBox[{"a", "[", "3", "]"}], ",", 
     RowBox[{"b", "[", "1", "]"}], ",", 
     RowBox[{"b", "[", "2", "]"}], ",", 
     RowBox[{"b", "[", "3", "]"}], ",", 
     FractionBox["1", "840"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940927487960885*^9, {3.9409275572492933`*^9, 3.9409275788772144`*^9}, 
   3.9409278942208138`*^9, 3.9409279985354776`*^9, 3.9409280403673744`*^9, {
   3.9409281767495766`*^9, 3.940928221921898*^9}, 3.9409282599789553`*^9, 
   3.940928326339303*^9, 3.940928732149767*^9, {3.9409288686048145`*^9, 
   3.940928898208959*^9}, {3.940928937668936*^9, 3.9409289887946053`*^9}, 
   3.9409292870893025`*^9, {3.9409294876420546`*^9, 3.940929515342165*^9}, 
   3.940929547314048*^9, 3.9409302797441998`*^9, {3.940930340666426*^9, 
   3.940930350484397*^9}, 3.9409304321999435`*^9, 3.9409304714521074`*^9, 
   3.940930560541253*^9, 3.940930749248556*^9},
 CellLabel->
  "Out[255]=",ExpressionUUID->"e3640a61-5e29-49b3-85bd-5f99a25ecd83"]
}, Open  ]]
},
WindowSize->{1152, 615.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"45e29206-ba0e-4b30-b314-61e6e0aa24f8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 7222, 212, 714, "Input",ExpressionUUID->"73f0e8a9-0f47-4d61-becd-bc489685529a"],
Cell[7805, 236, 856, 15, 32, "Output",ExpressionUUID->"98107158-2568-4e3f-8fa7-27c08d691a98"],
Cell[8664, 253, 914, 17, 32, "Output",ExpressionUUID->"4034e168-c51e-4d58-a63a-8cc9a80aa96b"],
Cell[9581, 272, 1088, 23, 47, "Output",ExpressionUUID->"5ba3dff9-0101-4350-a1f5-640eda196b3b"],
Cell[10672, 297, 1158, 25, 48, "Output",ExpressionUUID->"97ce0e43-8f56-4478-81c4-32594ef7fa0a"],
Cell[11833, 324, 1183, 26, 47, "Output",ExpressionUUID->"fea4411b-585a-4e50-9b36-0db360f0b995"],
Cell[13019, 352, 1088, 23, 48, "Output",ExpressionUUID->"37cdcd77-904e-44f0-aaad-8b3a9dcdd34c"],
Cell[14110, 377, 1043, 22, 48, "Output",ExpressionUUID->"f390fc33-6d67-4f6e-9191-b38fb65d045c"],
Cell[15156, 401, 884, 16, 48, "Output",ExpressionUUID->"5a066c33-b997-497b-b595-13de40bd6162"],
Cell[16043, 419, 4930, 133, 185, "Output",ExpressionUUID->"e3640a61-5e29-49b3-85bd-5f99a25ecd83"]
}, Open  ]]
}
]
*)

